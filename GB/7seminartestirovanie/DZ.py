# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) 
# в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова, если во фразе несколько слов, 
# то они разделяются дефисами. Фразы отделяются друг от друга пробелами. Стихотворение  Винни-Пух вбивает в программу с клавиатуры. 
# В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке

# *Пример:*

# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да    
#     **Вывод:** Парам пам-пам  

# import functools

# str1 = "пара-ра-рам рам-пам-папам па-ра-па-да"  #"пара-ра-рам рам-пам-папам па-ра-па-да пере-ре-рем рем-пем-пепем пе-ре-пе-де"
# print(str1)

# lst1 = str1.split()
# print(lst1)  #['пара-ра-рам', 'рам-пам-папам', 'па-ра-па-да']

# lst2 = functools.reduce(lambda a, x: a + x.count('а'), lst1, 0)  #lst2 = functools.reduce(lambda a, x: a + x.count('а', 'е'), lst1, 0)
# print(lst2)

# if lst2 % 2 == 0:
#     print("Парам пам-пам")
# else :
#     print("Пам парам")


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MIKMA
# def countSounds(s):
#     sounds = "аеёиоуыюяaeiou"
#     soundss=sounds+sounds.upper()
#     cc=0
#     for j in soundss :
#         cc+= s.count(j)
#     return cc
# #str1 ="пара-ра-рам рам-пам-папам па-ра-па-дам  Парам-пам-пам"
# str1 ="пeра-ра-рам рум-пам-пяпум па-ра-па-дам  Парам-паю-паю"
# s =str1.split()
# print(s)
# for w in s :
#     print(w,"  :Гласных:",countSounds(w))
# #ss = list(map(lambda x: x.count("а")+x.count("a"), str1.split()))
# ss = list(map(lambda x: countSounds(x), str1.split()))
# print(ss)
# if max(ss)==min(ss) :
#     print("Парам пам-пам")
# else :
#     print("Пам парам")
#     print("то есть разное кол-во гласных")

# Сергей Сердюк
# Администратор
# countVowels.count(countVowels[0]) == len(countVowels)



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. 
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны. 
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). Примечание: бинарной операцией называется любая операция,
# у которой ровно два аргумента, как, например, у операции умножения.

# *Пример:*

# **Ввод:** `print_operation_table(lambda x, y: x * y) ` 
# **Вывод:**
# 1 2 3 4 5 6

# 2 4 6 8 10 12
# 3 6 9 12 15 18
# 4 8 12 16 20 24
# 5 10 15 20 25 30
# 6 12 18 24 30 36


# import random  

# n = 6
# m = 6
# a = [ [random.randint(0,100)]*m for i in range(n) ]
# for i in range(len(a)):         # len(a) - возвращает количество строк в матрице А
#     for j in range(len(a[i])):  # len(A[i]) - возвращает количество элементов в строке i
#         print(a[i][j], end = ' ')
#     print()                     # делаем переход на новую строку 



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MIKMA
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
orbP = list(filter( lambda x : x[0]!=x[1], orbits)) # отбираем только те, чьи элипсы - не круги (разные полуоси)
print(orbP) # контрольная печать отобранного
orbS=list(map(lambda x: x[0]*x[1], orbP)) # строим список из величин площадей квадартов полуось*полуось
print(orbS) # контрольная печать списка числовых величин, пропорциональных площади эллипсов
maxS = max(orbS) # находим максимальное значение в списке значений площадей
print(maxS) # печать максимального
orbBest = list (filter( lambda x: x[0]*x[1]== maxS, orbP)) # отбираем в новый список орбиты с макс значением ...
print(orbBest)

# SERDYUK
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(max(orbits, key= lambda x  : x[0] * x[1]*(x[0]!=x[1])))